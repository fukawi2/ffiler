#!/bin/bash

###############################################################################
# Copyright (C) 2015 Phillip Smith
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
###############################################################################

set -eu


bomb() {
  echo "BOMBS AWAY: $1" >&2
  exit 1;
}

usage() {
  printf "Usage: %s [options] file1 file2 fileN\n" "$0"
  printf "Options:\n"
  printf '   %-25s %-50s\n' \
    '-y'   'File into a year folder only (eg, 2015/)' \
    '-m'   'File by year and month (eg, 2015/07-Jul/)' \
    '-d'   'File by year, month and day (eg, 2015/07-Jul/19/)' \
    '-s X' 'File by first X chars of the md5 hash of the file name (faster than -S)' \
    '-S X' 'File by first X chars of the md5 hash of the file contents (slow)' \
    '-f X' 'File by first X chars of file name (eg, -f3 a/f/i/afile.txt)' \
    '-v'   'Verbose output' \
    '-n'   'Dry run only (do not move files)'
}

dirsplitfilename() {
  string=$1
  depth=$2
  output=
  for ((X=0; X < $depth; X++)) ; do
    char=${string:$X:1}
    # replace non-alphanumeric with an underscore
    if [[ ! $char =~ [A-Za-z0-9] ]] ; then
      char=_
    fi
    output="${output}${char}/"
  done
  echo "$output"
}

declare fileby=
declare filedepth=
declare verbose=
declare dry_run=

### fetch our cmdline options
while getopts ":hymdvns:S:f:" opt; do
  case $opt in
    y)  fileby=y  ;;
    m)  fileby=m  ;;
    d)  fileby=d  ;;
    s)  fileby=s
        filedepth=$OPTARG  ;;
    S)  fileby=S
        filedepth=$OPTARG  ;;
    f)  fileby=f
        filedepth=$OPTARG  ;;
    n)  dry_run=1
        verbose=1   ;;
    v)  verbose=1   ;;
    h)
      usage
      exit 0
      ;;
    \?)
      echo "ERROR: Invalid option: -$OPTARG" >&2
      usage
      exit 1
      ;;
    :)
      echo "ERROR: Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
    esac
done
shift $((OPTIND-1))

# bomb unless the user has told us how to sort the file(s)
[[ -z "$fileby" ]] && { bomb "Undefined sort method"; }

for X in "$@"; do
  fname="${1:-}"
  shift

  # validate the given user input
  [[ -z $fname ]]   && { usage; exit -1; }
  [[ ! -f $fname ]] && { bomb "File not found: $fname"; }

  base_fname=${fname##*/}

  # get the file modified timestamp in epoch format
  mod_tz_epoch=$(stat --format=%Y "$fname")

  # work out the destination path for this file
  declare destdir=
  case $fileby in
    y)
      destdir=$(date --date=@$mod_tz_epoch +%Y/)
      ;;
    m)
      destdir=$(date --date=@$mod_tz_epoch +%Y/%m-%b/)
      ;;
    d)
      destdir=$(date --date=@$mod_tz_epoch +%Y/%m-%b/%d/)
      ;;
    s)
      md5hash=$(printf '%s' "$base_fname" | md5sum | awk '{ print $1 }')
      destdir=$(dirsplitfilename "$md5hash" $filedepth)
      ;;
    S)
      md5hash="$(md5sum "$fname" | awk '{ print $1 }')"
      destdir="$(dirsplitfilename "$md5hash" $filedepth)"
      ;;
    f)
      destdir=$(dirsplitfilename "$base_fname" $filedepth)
      ;;
  esac

  if [[ ! -d $destdir ]] ; then
    [[ -n $verbose ]] && printf 'Create destination: %s\n' "$destdir"
    [[ -z $dry_run ]] && mkdir -p "$destdir"
  fi

  # give feedback
  [[ -n $verbose ]] && printf '%s => %s\n' "$fname" "$destdir"
  # do the move
  [[ -z $dry_run ]] && mv "$fname" "$destdir"
done

exit 0
